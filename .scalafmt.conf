version = "3.7.4"

encoding = "UTF-8"

style = IntelliJ

lineEndings = unix
maxColumn = 200

docstrings {
  style = SpaceAsterisk
  forceBlankLineBefore = false
}

runner.dialect = scala3

indent {
  main = 2
  callSite = 2
  extendSite = 2
  defnSite = 4
}

align {
  preset = more
  tokens = [
    {
      code = "%"
      owner = "Term.ApplyInfix"
    }
    {
      code = "{"
      owner = Template
    }
    {
      code = extends
      owner = "Defn.(Class|Trait|Object)"
    }
    {
      code = "="
      owner = "(Enumerator.Val|Defn.(Va(l|r)|Def|Type))"
    }
    {
      code = "<-"
      owner = "Enumerator.Generator"
    }
    {
      code = "//"
      owner = ".*"
    }
    {
      code = "->"
      owner = "Term.ApplyInfix"
    }
    {
      code = "%%"
      owner = "Term.ApplyInfix"
    }
    {
      code = "=>"
      owner = Case
    }
    {
      code = "}"
      owner = Template
    }
    {
      code = "%%%"
      owner = "Term.ApplyInfix"
    }
  ]
  arrowEnumeratorGenerator = false
  openParenCallSite = false
  openParenDefnSite = false
  multiline = true
  allowOverflow = true
  stripMargin = true
}

newlines {
  source = keep
  beforeTypeBounds = unfold
  topLevelStatementBlankLines = []
  topLevelBodyIfMinStatements = []
  topLevelBodyMinStatements = 2
  beforeMultiline = keep
  beforeCurlyLambdaParams = multilineWithCaseOnly
  afterCurlyLambdaParams = never
  forceBeforeMultilineAssign = def
  neverInResultType = true
  penalizeSingleSelectMultiArgList = false
  alwaysBeforeElseAfterCurlyIf = false
}

rewrite {
  rules = [
    PreferCurlyFors
    Imports
    SortModifiers
    RedundantBraces
    RedundantParens
  ]
  redundantBraces {
    maxLines = 100
    stringInterpolation = true
    includeUnitMethods = true
    methodBodies = true
  }
  sortModifiers {
    order = [private, protected, final, implicit, sealed, abstract, override, lazy]
  }
  imports {
    sort = scalastyle
    groups = [
      ["sbt..*"]
      ["java..*"]
      ["scala.*"]
      [".*"]
      ["meringue.*"]
    ]
  }
}

project {
  git = false
}

spaces {
  beforeContextBoundColon = Never
  afterTripleEquals = true
}

binPack {
  literalArgumentLists = true
  literalsMinArgCount = 4
  parentConstructors = OnelineIfPrimaryOneline
}

includeCurlyBraceInSelectChains = true
includeNoParensInSelectChains = true

optIn {
  breakChainOnFirstMethodDot = true
  breaksInsideChains = false
  encloseClassicChains = true
  annotationNewlines = false
  selfAnnotationNewline = false
  configStyleArguments = false
}

importSelectors = singleLine
assumeStandardLibraryStripMargin = true
indentOperator.preset = akka
indentYieldKeyword = true
